#!/usr/bin/env python
from __future__ import print_function

import sys
import cv2
import numpy as np



def detection(image,color):
	# define the list of boundaries
	boundaries = [
	([0, 70, 50], [10, 255, 255]),
	([0, 0, 100], [100, 100, 255]),
	([25, 146, 190], [62, 174, 255]),
	([103, 86, 65], [145, 133, 128])]
	
        
    	hsv=cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
	
	color_def={'r':0,'g':1,'b':2,'y':3}
	# select the color boundaries
	color_sel=color_def.get(color,0)
	(lower, upper)=boundaries[color_sel]
	# create NumPy arrays from the boundaries
	lower = np.array(lower, dtype = "uint8")
	upper = np.array(upper, dtype = "uint8")

	# find the colors within the specified boundaries and apply
	# the mask
	mask = cv2.inRange(hsv, lower, upper)
	kernel=np.ones((5,5),np.uint8)
	mask=cv2.erode(mask,kernel,iterations=1)
	output = cv2.bitwise_and(image, image, mask = mask)
 	return (mask,output)


def callback():    
    cv_image = cv2.imread("/home/vinita/test_img/test4.png")
    (rows,cols,channels) = cv_image.shape
    center_img = (cols/2, rows/2)
    cv_image = cv_image[100:600,:] #cropped image
        	
    (mask,cv_img)=detection(cv_image,'r')
    #mask[mask>0]=1

    cv2.imshow("Image window", cv_img)
    cv2.imshow("Original Image window", mask)

    cv2.waitKey(10000)
    
    rect = cv2.convexHull(mask)

    print(rect)


def main():
   callback()
   
   cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
